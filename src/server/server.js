import React from 'react';
import express from 'express';
import App from '@react-app/app';
import { ServerStyleSheet } from 'styled-components';
import ReactDOMServer from 'react-dom/server';
import { StaticRouter } from 'react-router-dom';
import logger from '@dev-tools/logger';
import { ChunkExtractor } from '@loadable/server';
import path from 'path';
const router = express.Router();

/**
 * exports a function that returns a function for hot server middleware purposes
 */
const serverSideRender = clientStats => async (req, res) => {
    const sheet = new ServerStyleSheet();
    try {
        // This is the stats file generated by webpack loadable plugin
        const statsFile = path.resolve(
            __dirname,
            '../client/loadable-stats.json'
        );
        // We create an extractor from the statsFile
        const extractor = new ChunkExtractor({ statsFile });
        const app = sheet.collectStyles(
            <StaticRouter location={req.url} context={{}}>
                <App />
            </StaticRouter>
        );
        // Wrap your application using "collectChunks"
        const jsx = extractor.collectChunks(app);
        // Render your application
        const html = ReactDOMServer.renderToString(jsx);
        // You can now collect your script tags
        const scriptTags = extractor.getScriptTags(); // or extractor.getScriptElements();
        const styleTags = sheet.getStyleTags();
        // You can also collect your "preload/prefetch" links
        res.send(`
                <!doctype html>
                    <html>
                        <head>
                            ${styleTags}
                        </head>
                        <body>
                            <div id="root">${html}</div>
                        </body>
                        ${scriptTags}
                </html>
          `);
    } catch (error) {
        // handle error
        logger.error(error);
        res.send(error);
    } finally {
        sheet.seal();
    }
};

export default ({ clientStats }) => {
    /**
     * TO DO: Create a 404 page for anything that doesn't exist yet
     * e.g. favicon
     */
    router.get(/^\/(?!favicon|\/graphql).*/, serverSideRender(clientStats));
    return router;
};
